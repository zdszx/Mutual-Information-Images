package cake.screens;

import cake.components.ImageViewer;
import cake.components.SimplePanel;
import cake.utils.ImageUtils;
import java.awt.Image;
import java.awt.Rectangle;
import java.awt.Toolkit;
import java.awt.image.BufferedImage;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.List;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/**
 * @author Jean Vitor de Paulo Class to manipulate the main screen and its
 * behaviours
 */
public class MainScreen extends javax.swing.JFrame implements PropertyChangeListener {

    BufferedImage blueImage, greenImage, redImage, image,imageCompare;
    panelStatus statusGreen = panelStatus.NOTCHANGED;
    panelStatus statusRed = panelStatus.NOTCHANGED;
    panelStatus statusBlue = panelStatus.NOTCHANGED;
    panelStatus statusAlpha = panelStatus.NOTCHANGED;
    public final int maxValue = 256;
    private Rectangle currentRect;
    private Rectangle currentRectCompare;
    File file;
    private boolean isInitalized = false;

    public MainScreen() {
        initComponents();
        Image icon = Toolkit.getDefaultToolkit().getImage(getClass().getResource("/res/cake.png"));
        setIconImage(icon);      
        this.setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     *
     * @param mainPanel
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel4 = new javax.swing.JPanel();
        lblFileName = new javax.swing.JLabel();
        lbl8bit = new javax.swing.JLabel();
        lblRed = new javax.swing.JLabel();
        lblGreen = new javax.swing.JLabel();
        lblBlue = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        pnlMain = new javax.swing.JPanel();
        pnlRed = new javax.swing.JPanel();
        pnlGreen = new javax.swing.JPanel();
        pnlBlue = new javax.swing.JPanel();
        lblChannels = new javax.swing.JLabel();
        lblTitle = new javax.swing.JLabel();
        pnlMainCompare = new javax.swing.JPanel();
        lbl8bitCompare = new javax.swing.JLabel();
        lbl8bitMI = new javax.swing.JLabel();
        lbl8bit1 = new javax.swing.JLabel();
        menGeneral = new javax.swing.JMenuBar();
        menOpen = new javax.swing.JMenu();
        menOpenImage = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        menClose = new javax.swing.JMenuItem();
        menExit = new javax.swing.JMenu();
        menAbout = new javax.swing.JMenuItem();

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 151, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 129, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Cake Image Analyzer");
        setName("mainFrame"); // NOI18N

        lblFileName.setText("File: None");

        lbl8bit.setText("Original Image Entropy:");

        lblRed.setText("Red Channel:");

        lblGreen.setText("Green Channel:");

        lblBlue.setText("Blue Channel:");

        pnlMain.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        pnlMain.setPreferredSize(new java.awt.Dimension(465, 432));
        pnlMain.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pnlMainMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout pnlMainLayout = new javax.swing.GroupLayout(pnlMain);
        pnlMain.setLayout(pnlMainLayout);
        pnlMainLayout.setHorizontalGroup(
            pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 533, Short.MAX_VALUE)
        );
        pnlMainLayout.setVerticalGroup(
            pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        pnlRed.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        pnlRed.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pnlRedMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout pnlRedLayout = new javax.swing.GroupLayout(pnlRed);
        pnlRed.setLayout(pnlRedLayout);
        pnlRedLayout.setHorizontalGroup(
            pnlRedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        pnlRedLayout.setVerticalGroup(
            pnlRedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 132, Short.MAX_VALUE)
        );

        pnlGreen.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        pnlGreen.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pnlGreenMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout pnlGreenLayout = new javax.swing.GroupLayout(pnlGreen);
        pnlGreen.setLayout(pnlGreenLayout);
        pnlGreenLayout.setHorizontalGroup(
            pnlGreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 297, Short.MAX_VALUE)
        );
        pnlGreenLayout.setVerticalGroup(
            pnlGreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 130, Short.MAX_VALUE)
        );

        pnlBlue.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        pnlBlue.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pnlBlueMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout pnlBlueLayout = new javax.swing.GroupLayout(pnlBlue);
        pnlBlue.setLayout(pnlBlueLayout);
        pnlBlueLayout.setHorizontalGroup(
            pnlBlueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        pnlBlueLayout.setVerticalGroup(
            pnlBlueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 133, Short.MAX_VALUE)
        );

        lblChannels.setText("RGB Channels");

        pnlMainCompare.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        pnlMainCompare.setPreferredSize(new java.awt.Dimension(465, 432));
        pnlMainCompare.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pnlMainCompareMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout pnlMainCompareLayout = new javax.swing.GroupLayout(pnlMainCompare);
        pnlMainCompare.setLayout(pnlMainCompareLayout);
        pnlMainCompareLayout.setHorizontalGroup(
            pnlMainCompareLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 533, Short.MAX_VALUE)
        );
        pnlMainCompareLayout.setVerticalGroup(
            pnlMainCompareLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 455, Short.MAX_VALUE)
        );

        lbl8bitCompare.setText("Compare Image Entropy:");

        lbl8bitMI.setText("Mutual Information：");

        lbl8bit1.setText(" ");

        menOpen.setText("File");

        menOpenImage.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, 0));
        menOpenImage.setText("Open Image");
        menOpenImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menOpenImageActionPerformed(evt);
            }
        });
        menOpen.add(menOpenImage);

        jMenuItem1.setText("Open CompareImage");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        menOpen.add(jMenuItem1);

        menClose.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_ESCAPE, 0));
        menClose.setText("Exit");
        menClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menCloseActionPerformed(evt);
            }
        });
        menOpen.add(menClose);

        menGeneral.add(menOpen);

        menExit.setText("About");

        menAbout.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_H, 0));
        menAbout.setText("About Cake Image Analyzer");
        menAbout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menAboutActionPerformed(evt);
            }
        });
        menExit.add(menAbout);

        menGeneral.add(menExit);

        setJMenuBar(menGeneral);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblFileName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(28, 28, 28))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(pnlMain, javax.swing.GroupLayout.PREFERRED_SIZE, 537, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pnlMainCompare, javax.swing.GroupLayout.PREFERRED_SIZE, 537, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(pnlGreen, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(pnlBlue, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(pnlRed, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addContainerGap())
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblChannels)
                                .addGap(84, 84, 84))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblTitle)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lbl8bit1, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(layout.createSequentialGroup()
                .addGap(152, 152, 152)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbl8bitMI, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbl8bitCompare, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lbl8bit, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(71, 71, 71)
                        .addComponent(lblRed)
                        .addGap(103, 103, 103)
                        .addComponent(lblGreen)
                        .addGap(114, 114, 114)
                        .addComponent(lblBlue)))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(pnlMainCompare, javax.swing.GroupLayout.DEFAULT_SIZE, 459, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblChannels, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pnlRed, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pnlGreen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pnlBlue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 4, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(pnlMain, javax.swing.GroupLayout.DEFAULT_SIZE, 459, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblTitle)
                    .addComponent(lbl8bit1))
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addComponent(lbl8bit, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblRed)
                            .addComponent(lblGreen)
                            .addComponent(lblBlue))))
                .addGap(18, 18, 18)
                .addComponent(lbl8bitCompare, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(lbl8bitMI, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, 24, Short.MAX_VALUE)
                .addComponent(lblFileName, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        lblFileName.getAccessibleContext().setAccessibleName("");

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private void menOpenImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menOpenImageActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        int returnVal = fileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            file = fileChooser.getSelectedFile();
            try {
                loadImages();
                updatePanels(image, blueImage, redImage, greenImage);
                this.setLabelTexts();
                this.isInitalized = true;

                //lblAlpha.setText("Alpha Channel: " + df.format(ImageUtils.getEntropy(alphaImage, maxValue)));
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, ex, "Error!", JOptionPane.ERROR_MESSAGE);

            }
        }
        //addcomponent function
    }//GEN-LAST:event_menOpenImageActionPerformed
    private void menAboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menAboutActionPerformed
        String infoMessage = "To calculate entropy and mutual inforamtion of images \n";
                
        JOptionPane.showMessageDialog(null, infoMessage, "About", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_menAboutActionPerformed
    private void menCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menCloseActionPerformed
        System.exit(0);
    }//GEN-LAST:event_menCloseActionPerformed
    private void pnlRedMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pnlRedMouseClicked
        if (!this.isInitalized) {
            return;
        }
        try {
            if (statusGreen == panelStatus.NOTCHANGED) {
                updatePanels(greenImage, blueImage, redImage, image);
                statusGreen = panelStatus.CHANGED;
            } else {
                updatePanels(image, blueImage, redImage, greenImage);
                statusGreen = panelStatus.NOTCHANGED;
            }
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, ex, "Error!", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_pnlRedMouseClicked
    private void pnlGreenMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pnlGreenMouseClicked
        if (!this.isInitalized) {
            return;
        }
        try {
            if (statusBlue == panelStatus.NOTCHANGED) {
                updatePanels(blueImage, image, redImage, greenImage);
                statusBlue = panelStatus.CHANGED;
            } else {
                updatePanels(image, blueImage, redImage, greenImage);
                statusBlue = panelStatus.NOTCHANGED;
            }
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, ex, "Error!", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_pnlGreenMouseClicked
    private void pnlBlueMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pnlBlueMouseClicked
        if (!this.isInitalized) {
            return;
        }
        try {
            if (statusRed == panelStatus.NOTCHANGED) {
                updatePanels(redImage, blueImage, image, greenImage);
                statusRed = panelStatus.CHANGED;
            } else {
                updatePanels(image, blueImage, redImage, greenImage);
                statusRed = panelStatus.NOTCHANGED;
            }
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, ex, "Error!", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_pnlBlueMouseClicked

    /**
     * Called when a mouse action happens on the main panel Do nothing if an
     * image is on loaded, open the file selection otherwise
     *
     * @param evt the mouse event
     */
    private void pnlMainMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pnlMainMouseClicked
        if (this.isInitalized) {
            return;
        }
        JFileChooser fileChooser = new JFileChooser();
        int returnVal = fileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            file = fileChooser.getSelectedFile();
            try {
                loadImages();
                updatePanels(image, blueImage, redImage, greenImage);
                this.setLabelTexts();
                this.isInitalized = true;
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, ex, "Error!", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_pnlMainMouseClicked

    private void pnlMainCompareMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pnlMainCompareMouseClicked
        // TODO add your handling code here:
        
    }//GEN-LAST:event_pnlMainCompareMouseClicked

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
         JFileChooser fileChooser = new JFileChooser();
        int returnVal = fileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            file = fileChooser.getSelectedFile();
            try {
                loadImagesCompare();
                updatePanelsCompare(imageCompare);
                this.setLabelTexts();
                this.isInitalized = true;

                //lblAlpha.setText("Alpha Channel: " + df.format(ImageUtils.getEntropy(alphaImage, maxValue)));
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, ex, "Error!", JOptionPane.ERROR_MESSAGE);

            }
        }
        
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    /**
     * Loads the main image, and do the operations to find the other ones
     * (RED,GREEN,BLUE)
     *
     * @throws IOException
     */
    private void loadImages() throws IOException {
        try {
            image = ImageIO.read(file);
            blueImage = ImageUtils.getBlue(image);
            //alphaImage=ImageUtils.getAlpha(image);
            redImage = ImageUtils.getRed(image);
            greenImage = ImageUtils.getGreen(image);
            lblFileName.setText("File: " + file.getAbsolutePath());
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "File not supported!", "Error!", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void loadImagesCompare() throws IOException {
        try {
            imageCompare = ImageIO.read(file);
            blueImage = ImageUtils.getBlue(imageCompare);
            //alphaImage=ImageUtils.getAlpha(image);
            redImage = ImageUtils.getRed(imageCompare);
            greenImage = ImageUtils.getGreen(imageCompare);
            lblFileName.setText("File: " + file.getAbsolutePath());
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "File not supported!", "Error!", JOptionPane.ERROR_MESSAGE);
        }
    }
    /**
     * Update the main screen JPanels. This method is used to change the Images
     * between the JPanels
     * 
     * how to add mainpanel2???
     
     * @param BufferedImage "swap*" - The image that will be added to its
     * JPanel, accordingly to the color
     */
    private void updatePanels(BufferedImage swapOriginal, BufferedImage swapBlue, BufferedImage swapRed, BufferedImage swapGreen) throws IOException {
        JPanel mainPanel, greenPanel, redPanel, bluePanel;//, alphaPanel;
        pnlMain.removeAll();
        pnlRed.removeAll();
        pnlBlue.removeAll();
        pnlGreen.removeAll();
        //pnlAlpha.removeAll();
        mainPanel = new ImageViewer(swapOriginal, pnlMain);
        mainPanel.addPropertyChangeListener(this);
        bluePanel = new SimplePanel(swapBlue, pnlGreen);
        greenPanel = new SimplePanel(swapGreen, pnlRed);
        redPanel = new SimplePanel(swapRed, pnlBlue);
        //alphaPanel = new SimplePanel(swapAlpha,pnlAlpha);
        this.getContentPane().add(mainPanel);
        redPanel.setBounds(1, 1, super.getWidth(), super.getHeight());
        greenPanel.setBounds(1, 1, super.getWidth(), super.getHeight());
        bluePanel.setBounds(1, 1, super.getWidth(), super.getHeight());
        //alphaPanel.setBounds(1, 1, super.getWidth(), super.getHeight());
        pnlMain.add(mainPanel);
        pnlRed.add(greenPanel);
        pnlBlue.add(redPanel);
        pnlGreen.add(bluePanel);

        //Resize image for futher entropy calculation use
        image = ImageUtils.toBufferedImage(ImageUtils.getScaledImage(image, mainPanel.getWidth(), mainPanel.getHeight()));

        currentRect = new Rectangle(0, 0, image.getWidth(), image.getHeight());
        //pnlAlpha.add(alphaPanel);
        this.revalidate();
        this.repaint();
        lblTitle.setText("Entropy values");
    }

    
        private void updatePanelsCompare(BufferedImage swapOriginal) throws IOException {
        JPanel mainPanel;//, alphaPanel;
        pnlMainCompare.removeAll();
        pnlRed.removeAll();
        pnlBlue.removeAll();
        pnlGreen.removeAll();
        //pnlAlpha.removeAll();
        mainPanel = new ImageViewer(swapOriginal, pnlMainCompare);
        mainPanel.addPropertyChangeListener(this);
    
        //alphaPanel = new SimplePanel(swapAlpha,pnlAlpha);
        this.getContentPane().add(mainPanel);

        //alphaPanel.setBounds(1, 1, super.getWidth(), super.getHeight());
        pnlMainCompare.add(mainPanel);

        //Resize image for futher entropy calculation use
        imageCompare = ImageUtils.toBufferedImage(ImageUtils.getScaledImage(imageCompare, mainPanel.getWidth(), mainPanel.getHeight()));

        currentRectCompare = new Rectangle(0, 0, imageCompare.getWidth(), imageCompare.getHeight());  //比对图像的长方形选择框参数，未用到，因为计算互信息保持与currentRect一致即可
        //pnlAlpha.add(alphaPanel);
        this.revalidate(); 
        this.repaint();
        lblTitle.setText("Entropy values compare");
    }
    
    /**
     * Set the text that indicates the entropy values The value computation is
     * also done here, based on the selected region Case nothing is selected,
     * the entire image is considered
     */
    private void setLabelTexts() {
        lbl8bit.setText(this.getEntropyForLabelWithCsv0("Original Image: ", image.getSubimage(currentRect.x, currentRect.y, currentRect.width, currentRect.height)));
        lbl8bitCompare.setText(this.getEntropyForLabelWithCsv1("Compare Image: ", imageCompare.getSubimage(currentRect.x, currentRect.y, currentRect.width, currentRect.height)));
        
        lblRed.setText(this.getEntropyForLabel("Red Channel: ", redImage.getSubimage(currentRect.x, currentRect.y, currentRect.width, currentRect.height)));
        lblGreen.setText(this.getEntropyForLabel("Green Channel: ", greenImage.getSubimage(currentRect.x, currentRect.y, currentRect.width, currentRect.height)));
        lblBlue.setText(this.getEntropyForLabel("Blue Channel: ", blueImage.getSubimage(currentRect.x, currentRect.y, currentRect.width, currentRect.height)));
        
        lbl8bitMI.setText(this.getMIWithCsv0Csv1("Mutual Information: "));
    }

    /**
     * Return the label text that indicates the entropy value of a given image
     * @param text The text to show on the labelk
     * @param image The image to calculate the entropy
     * @return
     */
    private String getEntropyForLabel(String text, BufferedImage image) {
        DecimalFormat df = new DecimalFormat("0.000");
        return text + df.format(ImageUtils.getEntropy(image, maxValue));
    }
    
    private String getEntropyForLabelWithCsv0(String text, BufferedImage image) {
        DecimalFormat df = new DecimalFormat("0.000");
        return text + df.format(ImageUtils.getEntropyWithCsv(image, maxValue,0));
    }
   private String getEntropyForLabelWithCsv1(String text, BufferedImage image) {
        DecimalFormat df = new DecimalFormat("0.000");
        return text + df.format(ImageUtils.getEntropyWithCsv(image, maxValue,1));
    }
   
   private String getMIWithCsv0Csv1(String text) {
    DecimalFormat df = new DecimalFormat("0.000");
    double ret=0;
    /*
    LaunchExe("E:\\DownloadChrome\\IVScalableEntropymetric\\CakeImageAnalyzer-master\\shiftmi.exe",
   "-f -1" ,"-t 1", "E:\\DownloadChrome\\IVScalableEntropymetric\\CakeImageAnalyzer-master\\r0.csv",
    "E:\\DownloadChrome\\IVScalableEntropymetric\\CakeImageAnalyzer-master\\r1.csv" ,
    "-o E:\\DownloadChrome\\IVScalableEntropymetric\\CakeImageAnalyzer-master\\MI.csv");
    */
    LaunchExe(".\\shiftmi.exe",
   "-f -1" ,"-t 1", ".\\r1000.csv",
    ".\\r1001.csv" ,
    "-o .\\MI.csv");
      
   String OutputfilePath=".\\MI.csv";
   List<Double[]> Valueslist = new ArrayList<Double[]>();
   readValues(OutputfilePath, Valueslist);
    for (int i = 0; i < Valueslist.size(); i++) {
        for (int j = 0; j <Valueslist.get(0).length; j++) {
            System.out.print(Valueslist.get(i)[j]+"  "+j+" ");
            ret+=Valueslist.get(i)[j];
        }
        System.out.println();
    }
        return text + df.format(ret/(Valueslist.get(0).length));
    }
   
   
   public  static void readValues(String readpath, List<Double[]> Valueslist) {
    //想要读取的数据是一个[N,Dim]的二维矩阵
    File inFile = new File(readpath);
    try {
        BufferedReader reader = new BufferedReader(new FileReader(inFile));

        while (reader.ready()) {
            //这里没有办法使用矩阵进行操作，因为我们一行一行的读没有办法知道csv中保存数据的长度和宽度
            //但是返回的是一个String，我们可以对这个String进行操作，按照分隔符将其分割，最好能是能够保存到一个完整的结构中
            String line = reader.readLine();
            String[] splitline = line.split(" ");     //zds0312注意具体的分割符号
            //这里每一列的元素都是一个double数值，例如
            //因此接下来我能够直接的转换成Double类型的变量
            int Dim = splitline.length;
            //将splitline中的每个元素保存到double类型的数组中
            Double[] temp = new Double[Dim];
            for (int i = 0; i < Dim; i++) {
                temp[i] = Double.valueOf(splitline[i]);
            }
            Valueslist.add(temp);
        }
        reader.close();

    } catch (Exception e) {
        e.printStackTrace();
    }
}
   
   
   public static float LaunchExe(String nomeexe, String parametro1, String parametro2,String parametro3,String parametro4,String parametro5)
        {
        try {
        
            Process pp= new ProcessBuilder(nomeexe, parametro1, parametro2, parametro3,parametro4,parametro5).start();
            BufferedReader in =new BufferedReader(new InputStreamReader(pp.getErrorStream()));
            String line;
            while ((line = in.readLine()) != null) {
                System.out.println(line);
            }
            int exitVal = pp.waitFor();
            System.out.println("Process exitValue: " + exitVal);
        } catch (Exception e) {
            e.printStackTrace();
            System.out.println(e.getMessage());
        }
       return 0;   // 目前没有用到
        }  
   
   
/*
    private String getEntropyForLabel(String text, Image image) {
        DecimalFormat df = new DecimalFormat("0.000");
        return text + df.format(ImageUtils.getEntropy(image, maxValue));
    }
*/
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainScreen().setVisible(true);
            }
        });
    }

    /**
     * Manage the events received via PropertyChangeListener
     *
     * @param evt
     */
    @Override
    public void propertyChange(PropertyChangeEvent evt) {
        switch (evt.getPropertyName()) {
            case "cancelSelection":
                lblTitle.setText("Entropy values");
                currentRect = new Rectangle(0, 0, image.getWidth(), image.getHeight());
                break;
            case "selected":
                Rectangle rect = (Rectangle) evt.getNewValue();
                currentRect = new Rectangle(0, 0, rect.width, rect.height);
                lblTitle.setText("Entropy values (Selected Region)");
                break;
        }
        this.setLabelTexts();
    }

    //Panel status to manage the image changed state
    public enum panelStatus {
        CHANGED, NOTCHANGED;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel lbl8bit;
    private javax.swing.JLabel lbl8bit1;
    private javax.swing.JLabel lbl8bitCompare;
    private javax.swing.JLabel lbl8bitMI;
    private javax.swing.JLabel lblBlue;
    private javax.swing.JLabel lblChannels;
    private javax.swing.JLabel lblFileName;
    private javax.swing.JLabel lblGreen;
    private javax.swing.JLabel lblRed;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JMenuItem menAbout;
    private javax.swing.JMenuItem menClose;
    private javax.swing.JMenu menExit;
    private javax.swing.JMenuBar menGeneral;
    private javax.swing.JMenu menOpen;
    private javax.swing.JMenuItem menOpenImage;
    private javax.swing.JPanel pnlBlue;
    private javax.swing.JPanel pnlGreen;
    private javax.swing.JPanel pnlMain;
    private javax.swing.JPanel pnlMainCompare;
    private javax.swing.JPanel pnlRed;
    // End of variables declaration//GEN-END:variables

}
